const data = require("./data.json");

var layout = {
  //арбатско-покровская
  0: ["18", "14", "260", "195", "173"],
  1: ["7", "21"],
  2: ["10", "8"],
  3: ["13", "12"],
  4: ["11", "18", "264", "96"],
  5: ["19", "9"],
  6: ["9", "17"],
  7: ["1", "14", "99", "127"],
  8: ["2", "15"],
  9: ["5", "6"],
  10: ["2", "19"],
  11: ["4", "17"],
  12: ["3", "16"],
  13: ["20", "3"],
  14: ["0", "7", "42"],
  15: ["8"],
  16: ["21", "12"],
  17: ["6", "11"],
  18: ["0", "4"],
  19: ["10", "5"],
  20: ["13"],
  21: ["16", "1"],
  //замоскворецкая
  22: ["43", "38"],
  23: ["34"],
  24: ["40", "29"],
  25: ["44", "39"],
  26: ["29", "35"],
  27: ["28", "39"],
  28: ["40", "27"],
  29: ["26", "24"],
  30: ["34", "37"],
  31: ["32", "45"],
  32: ["33", "31", "92"],
  33: ["43", "32"],
  34: ["30", "23", "113"],
  35: ["41", "26"],
  36: ["38", "42", "87", "65"],
  37: ["45", "30"],
  38: ["22", "36", "102"],
  39: ["25", "27"],
  40: ["24", "28"],
  41: ["42", "35", "193", "251"],
  42: ["36", "41", "14"],
  43: ["22", "33"],
  44: ["25"],
  45: ["31", "37"],
  //БКД
  46: ["51", "263"],
  47: ["229", "48", "50"],
  48: ["232", "47"],
  49: ["234", "51", "50"],
  50: ["49", "47", "235"],
  51: ["236", "46", "49", "158"],
  // бутовкская
  52: [55, 78],
  53: [56, 57],
  54: [56],
  55: [52, 58],
  56: [54, 53],
  57: [53, 58],
  58: [57, 55],
  // калининская
  59: [64, 66, 160],
  60: [64, 65, 255, 105],
  61: [62, 63],
  62: [61],
  63: [66, 61],
  64: [59, 60, 112],
  65: [60, 36, 87],
  66: [59, 63],
  // калужско рижская
  67: [82, 76],
  68: [72, 83],
  69: [84, 77],
  70: [75, 73],
  71: [72, 84, 133],
  72: [68, 71],
  73: [70, 79],
  74: [87, 88, 242],
  75: [86, 70],
  76: [67, 89, 152],
  77: [69],
  78: [90, 52],
  79: [73, 82],
  80: [89, 87, 101],
  81: [85, 83, 104],
  82: [79, 67],
  83: [81, 68],
  84: [71, 69],
  85: [88, 81],
  86: [90, 75],
  87: [80, 74, 36, 65],
  88: [74, 85, 124, 219],
  89: [76, 80],
  90: [78, 86],
  // каховская
  91: [92, 93],
  92: [91, 186],
  93: [32, 91],
  //кольцевая
  94: [26, 98, 100],
  95: [101, 102, 187],
  96: [98, 103, 264, 4],
  97: [99, 104, 199],
  98: [94, 96, 237],
  99: [105, 97, 7, 127],
  100: [104, 94, 177],
  101: [103, 95, 80],
  102: [105, 95, 38],
  103: [96, 101, 206],
  104: [97, 100, 87],
  105: [102, 99, 255, 60],
  //люблинско-дмитровская
  106: [128, 118],
  107: [118, 116],
  108: [117, 126],
  109: [119, 123],
  110: [116, 121],
  111: [125, 117],
  112: [114, 115],
  113: [128, 34],
  114: [121, 112],
  115: [112, 122, 250],
  116: [107, 110],
  117: [111, 108],
  118: [106, 107],
  119: [120, 109],
  120: [126, 119, 182],
  121: [110, 114],
  122: [115, 127, 64],
  123: [109],
  124: [127, 125, 219, 88],
  125: [124, 111, 191],
  126: [108, 120],
  127: [122, 124, 7, 99],
  128: [113, 106],
  //мцк
  129: [139, 138, 22],
  130: [159, 148, 165],
  131: [155, 142, 28],
  132: [153, 134],
  133: [136, 153, 71],
  134: [132, 146, 196],
  135: [143, 139, 178],
  136: [150, 136, 175],
  137: [144, 158, 267],
  138: [119, 156, 112, 114],
  139: [135, 129],
  140: [157, 151, 247],
  141: [146, 154, 12],
  142: [131, 145],
  143: [135, 152],
  144: [147, 137, 266],
  145: [142, 150],
  146: [134, 141, 248],
  147: [144, 152, 213],
  148: [130, 149],
  149: [148, 156],
  150: [145, 136, 119],
  151: [140, 155, 247],
  152: [143, 147, 76],
  153: [133, 132],
  154: [141, 159],
  155: [151, 131],
  156: [149, 138],
  157: [158, 140, 249, 234, 49],
  158: [137, 157, 236, 51],
  159: [154, 130, 66],
  //некрасовская линия
  160: [162, 165, 59],
  161: [168, 169, 246],
  162: [160],
  163: [164, 168],
  164: [163],
  165: [167, 160, 130],
  166: [169, 167],
  167: [166, 165],
  168: [163, 161],
  169: [161, 166],
  //серпуховско тимирязевская
  170: [172],
  171: [174, 190],
  172: [181, 170],
  173: [183, 195, 0, 260],
  174: [171],
  175: [182, 181, 136],
  176: [188, 185],
  177: [185, 191, 100],
  178: [179, 189, 135],
  179: [180, 178],
  180: [186, 179],
  181: [175, 181],
  182: [188, 175, 120],
  183: [187, 173],
  184: [190, 194],
  185: [177, 176, 232, 48],
  186: [180, 192, 92],
  187: [189, 183, 95],
  188: [176, 182],
  189: [178, 187],
  190: [171, 184],
  191: [193, 177, 125],
  192: [194, 186],
  193: [173, 191, 251, 41],
  194: [184, 192],
  //сокольническая линия
  195: [205, 202, 260, 0, 173],
  196: [218, 134],
  197: [213, 215],
  198: [204],
  199: [200, 201, 97],
  200: [212, 199],
  201: [199, 219],
  202: [195, 206],
  203: [219, 205.244],
  204: [208, 198],
  205: [203, 195, 42, 14],
  206: [202, 217, 103],
  207: [218, 212],
  208: [216, 204],
  209: [215, 220],
  210: [214, 211],
  211: [210, 216],
  212: [207, 200],
  213: [197, 217, 147],
  214: [220, 210],
  215: [197, 209],
  216: [211, 208],
  217: [213, 206],
  218: [196, 207, 146],
  219: [201, 203, 124, 88],
  220: [214, 209],
  //солнцевская
  237: [251, 258, 98],
  238: [258, 249],
  239: [256, 250],
  240: [246, 252],
  241: [243, 246],
  242: [255, 244, 74],
  243: [241],
  244: [242, 251, 203],
  245: [252, 256],
  246: [241, 240, 161],
  247: [249, 259, 151, 140],
  248: [254],
  249: [238, 247, 234, 49, 157],
  250: [239, 255, 115],
  251: [244, 237, 193, 41],
  252: [240, 245],
  253: [259, 257],
  254: [257, 248],
  255: [250, 242, 105, 60],
  256: [245, 239],
  257: [253, 254],
  258: [237, 238],
  259: [247, 253],
  //фили
  260: [261, 173, 195, 0],
  261: [260, 269],
  262: [272, 268],
  263: [264, 267, 46],
  264: [269, 270, 263, 96, 4],
  265: [271, 6],
  266: [270, 272, 144],
  267: [263, 137],
  268: [262, 271],
  269: [261, 264],
  270: [264, 266],
  271: [268, 265],
  272: [266, 262],
};

function solve(graph, s) {
  var solutions = {};
  solutions[s] = [];
  solutions[s].dist = 0;

  while (true) {
    var parent = null;
    var nearest = null;
    var dist = Infinity;

    //for each existing solution
    for (var n in solutions) {
      if (!solutions[n]) continue;
      var ndist = solutions[n].dist;
      var adj = graph[n];
      //for each of its adjacent nodes...
      for (var a in adj) {
        //without a solution already...
        if (solutions[a]) continue;
        //choose nearest node with lowest *total* cost
        var d = adj[a] + ndist;
        if (d < dist) {
          //reference parent
          parent = solutions[n];
          nearest = a;
          dist = d;
        }
      }
    }

    //no more solutions
    if (dist === Infinity) {
      break;
    }

    //extend parent's solution path
    solutions[nearest] = parent.concat(nearest);
    //extend parent's cost
    solutions[nearest].dist = dist;
  }

  return solutions;
}
//create graph
var graph = {};

const pathfinder = (start, need) => {
  for (var id in layout) {
    if (!graph[id]) graph[id] = {};
    layout[id].forEach(function (aid) {
      graph[id][aid] = 1;
      if (!graph[aid]) graph[aid] = {};
      graph[aid][id] = 1;
    });
  }
  var solutions = solve(graph, start);

  prev = data[start];
  const result = [];
  solutions[need].map((item) => {
    if (prev.b != data[item].b) {
      result.push({
        t: "change",
        desc: `Смена ветки с ${current_branch} на ${data[item].b}`,
        d: prev.change.filter((item) => item.t_name == data[item].n).d,
      });
    }
    result.push(data[item]);
    prev = data[item];
  });
};

module.exports = { pathfinder };
